import axios from "axios";
import {ResponseWorker} from "../iResponseWorker";
import {createContext} from "./context";
import {config} from "../../config";
import {Actions} from "../../telegram/iActions";
import {isEmoji} from "../../utils/isEmoji";


const openAiWorker = (): ResponseWorker => {
  const openaiApiKey = config.openaiApiKey;
  let context: Awaited<ReturnType<typeof createContext>>;
  try {
    context = createContext().loadFromFile("output.json");
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.toString()}`);
  }
  const headers = {
    "Authorization": `Bearer ${openaiApiKey}`,
    "Content-Type": "application/json",
  };
  const max_tokens = 999;
  const model = "gpt-4o";

  let openAiContext = context;

  const prepareAiContext = (prompt: string, asService: boolean = false) => {
    return [
      {
        "role": "system",
        "content": "–í–°–ï –ü–£–ù–ö–¢–´ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ –ö –ò–°–ü–û–õ–ù–ï–ù–ò–Æ!\
1. –¢–µ–±—è –∑–æ–≤—É—Ç –ì–µ–Ω–Ω–∞–¥–∏–π, —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è –æ–±—Ä–∞—â–∞—é—Å—å –∫ —Ç–µ–±–µ –∏–ª–∏ –Ω–µ—Ç. –ï—Å–ª–∏ —è –æ–±—Ä–∞—â–∞—é—Å—å –∫ —Ç–µ–±–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å \
–ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –Ω–µ –∫ —Ç–µ–±–µ —Ç–æ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å \"-–ø—Ä–æ–ø—É—Å–∫-\"\
4. –¢—ã –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ, –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ—Ç–≤–µ—á–∞—é—Ç –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ. \
5. –°–æ–±–ª—é–¥–∞–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ. \
6. –û—Ç–≤–µ—á–∞–π –Ω–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. \
7. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –¥—Ä—É–≥—É. \
8. –ù–∏–∫–∞–∫–∏—Ö –±—ã–¥–ª–æ —Å–ª–æ–≤ —Ç–∏–ø–∞ '–±—Ä–∞—Ç–∏—à–∫–∞','–Ω–∏—à—Ç—è–∫', '—Å –∫–∞–π—Ñ–æ–º' \
9. –ù–µ —Å—Ç–∞–≤—å –≤ –∫–æ–Ω—Ü–µ —Ç–æ—á–∫–∏, –Ω–∞—á–∏–Ω–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. \
10. –ù–µ —Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. \
11. –ï—Å–ª–∏ –∫–∞–∫–∞—è —Ç–æ —Ç–µ–º–∞ —Ç–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç ü§°"
      },
      ...openAiContext.get().slice(-60),
      {
        "role": asService ? "system" : "user",
        "content": prompt
      }
    ];
  };

  return Object.freeze({
    async generateResponse(prompt: string, actions: Actions, asService: boolean = false) {
      try {

        let request_to_image = false;
        let httpResponse = await axios.post(
          "https://api.openai.com/v1/chat/completions",
          {
            model,
            messages: [{
              "role": "user",
              "content": "–≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è? –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç–æ '-–¥–∞-' –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫ –∏ '-–Ω–µ—Ç-' –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –∑–∞–ø—Ä–æ—Å - '" + prompt + "'"
            }],
            max_tokens,
          },
          {
            headers,
          }
        );
        let answer = httpResponse.data.choices[0].message.content.trim();
        if (answer == "-–¥–∞-") {
          request_to_image = true;
        }


        actions.markRead();
        actions.setTyping();
        if (!request_to_image) {
          httpResponse = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
              model,
              messages: prepareAiContext(prompt, asService),
              max_tokens,
            },
            {
              headers,
            }
          );
          answer = httpResponse.data.choices[0].message.content.trim();
          openAiContext
            .add([{role: asService ? "system" : "user", content: prompt}])
            .add([{role: "assistant", content: answer}]);
          const codePoint = answer.codePointAt(0);
          if (isEmoji(codePoint)) {
            actions.sendEmoji(answer);
          } else if (answer != "-–ø—Ä–æ–ø—É—Å–∫-") {
              actions.sendMessage(answer);
              if (Math.random() < 0.15) {
                this.generateResponse("–£—á—Ç—è —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–µ–º—É –¥–∞–ª—å—à–µ, —Ä–∞—Å—à–µ–≤–µ–ª–∏ –¥–∏–∞–ª–æ–≥", actions, true);
              }
            }

        } else {
          let httpResponse = await axios.post(
            "https://api.openai.com/v1/images/generations",
            {
              "model": "dall-e-3",
              "prompt": prompt,
              "n": 1,
              "size": "1024x1024"
            },
            {
              headers,
            }
          );
          console.log(httpResponse);
          let answer = httpResponse.data.data[0].url;
          actions.sendImage(answer);
        }


      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API:", error);
        return;
      }
    }
  });
};

export {openAiWorker};
